// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News.Models;

namespace News.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211011204218_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "44546e06-8719-4ad8-b88a-f271ae9d6eab",
                            ConcurrencyStamp = "59f65c7d-f223-4ec6-b4ed-01c484511cdd",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");

                    b.HasData(
                        new
                        {
                            Id = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38a0ff9c-5d4a-4400-90a0-fd70250ae9f8",
                            Email = "my@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MY@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEXJ5NYM7HQL2Krd/J+qhY0j4AGQeMmaEAmcFz8+pKt4ClcdnF9hTTA3PYYGaRmL/g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("News.Models.Article", b =>
                {
                    b.Property<int>("IdArticle")
                        .HasColumnType("int")
                        .HasColumnName("id_article");

                    b.Property<DateTime?>("AddTime")
                        .HasColumnType("datetime")
                        .HasColumnName("add_time");

                    b.Property<int?>("IdAuthor")
                        .HasColumnType("int")
                        .HasColumnName("id_author");

                    b.Property<int>("IdSubsectionNews")
                        .HasColumnType("int")
                        .HasColumnName("id_subsection_news");

                    b.Property<byte[]>("ImageArticle")
                        .HasColumnType("image")
                        .HasColumnName("image_article");

                    b.Property<int>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("short_description");

                    b.Property<string>("Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("IdArticle");

                    b.HasIndex("IdAuthor");

                    b.HasIndex("IdSubsectionNews");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("News.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .HasColumnType("int")
                        .HasColumnName("id_author");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("document");

                    b.Property<int?>("IdSection")
                        .HasColumnType("int")
                        .HasColumnName("id_section");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("surname");

                    b.HasKey("IdAuthor");

                    b.HasIndex("IdSection");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("News.Models.Section", b =>
                {
                    b.Property<int>("IdSection")
                        .HasColumnType("int")
                        .HasColumnName("id_section");

                    b.Property<string>("NameSection")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name_section");

                    b.HasKey("IdSection");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("News.Models.Subsection", b =>
                {
                    b.Property<int>("IdSubsectionNews")
                        .HasColumnType("int")
                        .HasColumnName("id_subsection_news");

                    b.Property<int>("IdSection")
                        .HasColumnType("int")
                        .HasColumnName("id_section");

                    b.Property<string>("MetaDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MetaKeywords")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MetaTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameSubsection")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name_subsection");

                    b.HasKey("IdSubsectionNews")
                        .HasName("PK_News_Name");

                    b.HasIndex("IdSection");

                    b.ToTable("Subsection");
                });

            modelBuilder.Entity("News.Models.Article", b =>
                {
                    b.HasOne("News.Models.Author", "IdAuthorNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("IdAuthor")
                        .HasConstraintName("FK_Article_Author");

                    b.HasOne("News.Models.Subsection", "IdSubsectionNewsNavigation")
                        .WithMany("Articles")
                        .HasForeignKey("IdSubsectionNews")
                        .HasConstraintName("FK_Article_News_Name")
                        .IsRequired();

                    b.Navigation("IdAuthorNavigation");

                    b.Navigation("IdSubsectionNewsNavigation");
                });

            modelBuilder.Entity("News.Models.Author", b =>
                {
                    b.HasOne("News.Models.Section", "IdSectionNavigation")
                        .WithMany("Authors")
                        .HasForeignKey("IdSection")
                        .HasConstraintName("FK_Author_Section");

                    b.Navigation("IdSectionNavigation");
                });

            modelBuilder.Entity("News.Models.Subsection", b =>
                {
                    b.HasOne("News.Models.Section", "IdSectionNavigation")
                        .WithMany("Subsections")
                        .HasForeignKey("IdSection")
                        .HasConstraintName("FK_Subsection_Section")
                        .IsRequired();

                    b.Navigation("IdSectionNavigation");
                });

            modelBuilder.Entity("News.Models.Author", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("News.Models.Section", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Subsections");
                });

            modelBuilder.Entity("News.Models.Subsection", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
